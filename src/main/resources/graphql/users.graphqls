extend type Mutation {
    createUser(user: UsersInput): Users
}


extend type Query {
    fuzzyUsers(email: String): [Users]
#    users(id: [Long]): [Users]
    users(user: UsersInput): [Users]
#    user(id: Long): Users
    getUsers: [Users]
    findById(id: Long): Users
    findUserById(id: Long): Users
    findUsersById(id: Long!): Users
#    users(page: PageQuery!): UsersConnection
    pageUsers(first: Int, after: String, last: Int, before: String, email: String): UsersConnection
}


input UsersInput {
    email: String
    id: Long
}


type Users {
    id: Long
    username: String
    email: String
    password: String
    telephoneNumber: String
    userRoles: [UserRole]
    userGroups: [UserGroups]
#    userResources: [UserRe]
}